#compdef schedule schedule-tmux schedule-server
local curcontext="$curcontext" state state_descr line expl
typeset -A opt_args
integer NORMARG
local service_opts
service_opts=(
'(1 * -)'{'--help','-h'}'[print a brief help]'
'(1 * -)'{'--man','-\\?'}'[show extended help as a manpage]'
'(1 * -)'{'--version','-V'}'[print version and exit]'
{'(--port)-P+','(-P)--port='}'[use specified TCP port]:port:(127.0.0.1)'
{'(--file)-f+','(-f)--file='}'[use specified file as socket)]:socket:_files "-g*(=)"'
{'(--addr)-A+','(-A)--addr='}'[use specified address]:port:(8471)'
{'(--timeout)-T+','(-T)--timeout='}'[use specified timeout]:seconds:(10)'
{'(--password)-y+','(-y)--password='}'[use specified password]:password:(p P)'
'*'{'-Y+','--passfile='}'[use password from specified file]:file:_files'
'--check[syntax checking for schedule-tmux]'
'(--local -l '{'--tcp)-t','-t)--tcp'}'[use tcp socket (port)]'
'(--tcp -t '{'--local)-l','-l)--local'}'[use unix domain socket (file)]'
'(--no-color -nocolor -p '{'-F)--color','(--color)-F'}'[force color on non-terminal]'
'(--color -F '{'--no-color --nocolor)-p','--nocolor -p)--no-color','--no-color -p)--nocolor'}'[non-colored output]'
'(--daemon -B --detach -E '{'--bg --background)-b','--background -b)--bg','(--bg -b)--background'}'[run main task in background]'
'*'{'-a+','--alpha='}'[specify alpha-command/option)]:command:_normal'
{'(--alpha-ignore)-J','(-J)--alpha-ignore'}'[ignore exit status of alpha-command)]'
'(--bg --background -b --detach -E '{'--daemon)-B','-B)--daemon'}'[run semi-detached in background]'
'(--bg --background -b --daemon -B '{'--detach)-E','-E)--detach'}'[run detached in background]'
'*'{'-q','--quiet'}'[be more quiet (accumulative)]'
)
case ${service} in
(*server)
	service_opts+=(
{'(--skip-check)-S','(-S)--skip-check'}'[skip permission check (dangerous!)]'
{'(--fd)-d+','(-d)--fd='}'[use specified file descriptor]:file descriptor:(0)'
{'(--umask)-m+','(-m)--umask='}'[use specified umask]:umask:(0077)'
'--syslog[log actions using syslog]'
'(--Logfile)--logfile+[append to specified logfile]:logfile:_files'
'(--logfile)--Logfile+[clobber and use specified logfile]:logfile:_files'
{'(--user)-u+','(-u)--user='}'[use specified user permissions]:user name:_users'
{'(--group)-g+','(-g)--group='}'[use specified group permissions]:group name:_groups'
'(--user -u '{'--uid)-U+','-u)--uid='}'[use specified UID permissions]:user id:(65534)'
'(--group -g '{'--gid)-G+','-G)--gid='}'[use specified GID permissions)]:group id:(65534)'
'(--no-change-user -n '{'--change-user)-c','-c)--change-user'}'[change user permissions]'
'(--no-change-group -N '{'--change-group)-C','-C)--change-group'}'[change group permissions]'
'(--keep-permissions -k --change-user -c --change-group -C '{'--change-permissions)-K','-K)--change-permissions'}'[change user/group permissions]'
'(--user -u --uid -U '{'--no-change-user)-n','-n)--no-change-user'}'[do not change user permissions]'
'(--group -g --gid -G '{'--no-change-group)-N','-N)--no-change-group'}'[do not change group permissions]'
'(--change-permissions -K --user -u --uid -U --group -g --gid -G --no-change-user -n '{'--keep-permissions)-k','-k)--keep-permissions'}'[do not change user/group permissions]'
'1:command:->cmds'
);;
(*tmux)
	service_opts+=(
'(--remain -r '{'--no-remain --noremain)-R','--noremain -R)--no-remain','--no-remain -R)--noremain'}'[close window on exit]'
'(--no-remain --noremain -R '{'--remain)-r','--r)--remain'}'[do not close window on exit]'
);&
(*)
	service_opts+=(
{'(--exit)-e+','(-e)--exit='}'[set specified exitstatus]:exitstatus:(0)'
{'(--job)-j+','(-j)--job='}'[JOB (set jobnumber)]:jobnumber:(0)'
'(--immediate -I '{'--ignore)-i+','-i)--ignore='}'[force specified exitstatus]:exitstatus:(0)'
'(--ignore -i '{'--immediate)-I+','-I)--immediate='}'[report immediately specified status)]:exitstatus:(0)'
'(--no-host --nohost -H '{'--no-user --nouser)-u','--nouser -u)--no-user','--no-user -u)--nouser'}'[Suppress output of user]'
'(--no-user --nouser -u '{'--no-host --nohost)-H','--nohost -H)--no-host','--no-host -H)--nohost'}'[Suppress output of HOSTTEXT]'
{'(--no-dir --nodir)-D','(--nodir -D)--no-dir','(--no-dir -D)--nodir'}'[Suppress output of PWD]'
{'(--keep-dir --keepdir)-d','(--keep-dir -d)--keep-dir','(--keep-dir -d)--keepdir'}'[Do not shortcut CWD]'
{'(--no-command --nocommand)-c','(--nocommand -c)--no-command','(--no-command -c)--nocommand'}'[Suppress output of command]'
'(--no-title --notitle)--title[Force windows title output]'
'(--text --title '{'--no-title)--notitle','--notitle)--no-title'}'[Suppress windows title output]'
'(--no-status --nostatus)--status[Force status line output]'
'(-text --status '{'--no-status)--nostatus','--nostatus)--no-status'}'[Suppress status line output]'
'--text=[specify format for status/title]:format:("%a (%s) %u@%h%H %c" "%a(%s)%u@%h%H:%c" "%a (%s) %c %u@%h%H %d")'
'--qtime=[specfiy queue time format]:time format:("%T" "%T %d.%m.%y")'
'--stime=[specfiy start time format]:time format:("%T->" "%T %d.%m.%y ->")'
'--etime=[specfiy end time format]:time format:("->%T" "->%T %d.%m.%y")'
'(--qtime)'{'--no-qtime','--noqtime'}'[no queue time output]'
'(--stime)'{'--no-stime','--nostime'}'[no start time output]'
'(--etime)'{'--no-etime','--noetime'}'[no end time output]'
'(--qtime --stime --etime --no-qtime --noqtime --no-stime --nostime --no-etime --noetime)'{'-n','--no-time','--notime'}'[no time output]'
'*'{'-x+','--finished='}'[check specified jobs finished]:job range:(\:)'
'*'{'-o+','--ok='}'[check specified jobs succeeded]:job range:(\:)'
'*'{'-s+','--started='}'[check specified jobs started]:job range:(\:)'
'1:command:->cmds'
'*:command:->rest'
);;
esac
_arguments -n -C -s -S -A '-*' : $service_opts
local ret=$?
case $state in
(*cmds)
	local cmds
	cmds=(
	'help:print a brief help'
	'man:show extended help as a manpage'
	)
	[[ $service == *server ]] || {
		cmds+=(
	'queue:queue job for later execution'
	{'s','start'}':queue and run job'
	{'sq','qs','start-or-queue'}':queue job and run it if the rest is finished'
	)
	[[ $service == *tmux ]] || cmds+=(
	'stop-server:stop schedule-server'
	'run:start queued job sequentially even if failure'
	{'x','exec'}':start queued job sequentially until failure'
	'bg:start queued jobs parallel and return'
	'parallel:start queued jobs parallel and wait'
	'wait:wait until queued running jobs are finished'
	'list:list queued jobs'
	'status:status of queued jobs'
	'address:address of queued jobs'
	'number:number of queued jobs'
	'ok:whether all jobs have finished ok'
	'finished:whether all jobs have finished'
	'started:whether all jobs have started'
	'quote:output further arguments in a quoted form'
	{'delete','remove'}':remove queued jobs from list'
	{'move','shift','insert'}':shift queued jobs in list'
	'cancel:cancel queued jobs'
	)
	}
	_describe -t commands 'command' cmds
	ret=$?;;
(*rest)
	local cmd=
	if [[ $NORMARG -gt 1 ]]
	then	cmd=$words[$((NORMARG))]
		if [[ $NORMARG -gt $#words ]]
		then	words=()
			CURRENT=1
		else	shift $NORMARG words
			((CURRENT-=NORMARG))
		fi
	fi
	local jobrange
	jobrange=
	case $cmd in
	(*q*|s|start)
		_normal
		ret=$?;;
	(sto*)
		;;
	(re*)
		jobrange=(':');;
	(w*|x*|e*|r*)
		jobrange=('/:');;
	(*)
		jobrange=(':');;
	esac
	if [[ $#jobrange -gt 0 ]]
	then	_description jobrange expl 'job range'
		compadd "$expl[@]" - $jobrange
		ret=$?
	fi;;
esac
return ret
