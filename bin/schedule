#!/usr/bin/env perl
# Copyright Martin V\"ath <martin at mvath.de>.
# SPDX-License-Identifier: BSD-3-Clause
# This is part of the schedule project.

BEGIN { require 5.012 }
package Schedule v8.0.0;

use strict;
use warnings;
use integer;
use File::Spec ();
#use Crypt::Rijndael (); # needed for password protection
#use Cwd ();
#use Digest::SHA (); # needed for password protection
#use Exporter qw(import);
#use Getopt::Long 2.24 ();
#use IO::Select ();
#use IO::Socket 1.19 (); # INET or UNIX, depending on user's choice
#use POSIX (); # needed for --detach (and recommended for --bg, --daemon)
#use Pod::Usage (); # optional, but no manpage or help without this
#use Sys::Hostname (); # not mandatory but recommended
#use Term::ANSIColor (); # not mandatory but recommended: fallback to no color
#use version 0.77 ();

use lib '/usr/share/schedule';
use FindBin;
if (($FindBin::Bin // '') ne '') {
	use lib File::Spec->catdir($FindBin::Bin, File::Spec->updir(),
		'share', 'schedule');
	use lib File::Spec->catdir($FindBin::Bin, 'share', 'schedule');
	use lib $FindBin::Bin
}
use Schedule::Connect ();
use Schedule::Helpers qw(nohup env_to_array is_nonnegative join_quoted);
&nohup(); # execute as early as possible

# Global/State variables:

our $VERSION;
my $s = Schedule::Connect->new('schedule', $VERSION);

# Default for the Options:

my $cancel = 0;
my $ignore = undef;
my $immediate = undef;
my $nouser = '';
my $nohost = '';
my $nodir = '';
my $nocommand = '';
my $nopausing = '';
my @commandtext = ();
my $keepdir = '';
my $destjob = 0;
my $tests = [[], [], []];
my $status = undef;
my $title = undef;
my $text = undef;
my $qtime = '%R';
my $stime = '%T->';
my $etime = '->%T %d.%m.%y';

#
# Commands
#

sub cmd_queue {
	exit(6) if ($s->check());
	require Schedule::Client::Cmd::Queue;
	&Schedule::Client::Cmd::Queue::queue(@_,
		$destjob, $cancel, $ignore, $immediate, $keepdir, $tests,
		$status, $title, $text, @commandtext)
}

sub cmd_run {
	$s->check_queue();
	require Schedule::Client::Cmd::Run;
	&Schedule::Client::Cmd::Run::run(@_)
}

sub cmd_parallel {
	$s->check_queue();
	require Schedule::Client::Cmd::Parallel;
	&Schedule::Client::Cmd::Parallel::parallel(@_)
}

sub cmd_list {
	$s->check_queue();
	require Schedule::Client::Cmd::List;
	&Schedule::Client::Cmd::List::list(@_,
		$nouser, $nohost, $nodir, $nocommand, $qtime, $stime, $etime)
		&& ($nopausing || &cmd_pause('test-pausing',
			"Server is in pausing state!\n"))
}

sub cmd_test {
	$s->check_queue();
	require Schedule::Client::Cmd::Test;
	&Schedule::Client::Cmd::Test::test(@_)
}

sub cmd_cancel {
	$s->check_queue();
	require Schedule::Client::Cmd::Cancel;
	&Schedule::Client::Cmd::Cancel::cancel($cancel)
}

sub cmd_remove {
	$s->check_queue();
	require Schedule::Client::Cmd::Remove;
	&Schedule::Client::Cmd::Remove::remove($cancel)
}

sub cmd_stop_server {
	$s->check_queue();
	require Schedule::Client::Cmd::Remove;
	&Schedule::Client::Cmd::Remove::remove($cancel, 1)
}

sub cmd_insert {
	$s->check_queue();
	require Schedule::Client::Cmd::Insert;
	&Schedule::Client::Cmd::Insert::insert($destjob)
}

sub cmd_pause {
	$s->check_queue();
	require Schedule::Client::Cmd::Pause;
	&Schedule::Client::Cmd::Pause::pause(@_)
}

sub cmd_quote {
	$s->check_queue();
	print(&join_quoted(@ARGV), "\n")
}

#
# Functions
#

sub check_file {
	my $default = $s->default_filename();
	my $file = $s->file();
	return 1 if (-S $file);
	$s->error("no socket $file exists", 'maybe you should run first: ' .
		&join_quoted('schedule-server', '--daemon',
			($default ? '-l' : ('-f', $file))));
	exit(7)
}

#
# Now the main program:
#

if (exists($ENV{'SCHEDULE_OPTS'})) {
	unshift(@ARGV, &env_to_array('SCHEDULE_OPTS'))
}

eval 'END { $s->did_alpha() || $s->exec_alpha() }';

# Parse Options:

$s->get_options(
	'exit|e=i', \$cancel,
	'command-text|C=s', \@commandtext,
	'no-user|nouser|u', \$nouser,
	'no-host|nohost|H', \$nohost,
	'no-dir|nodir|D', \$nodir,
	'no-command|nocommand|c', \$nocommand,
	'no-pausing|nopausing', \$nopausing,
	'keep-dir|keepdir|d', \$keepdir,
	'ignore|i=i', \$ignore,
	'immediate|I=i', \$immediate,
	'status!', \$status,
	'title!', \$title,
	'text=s', \$text,
	'qtime=s', \$qtime,
	'stime=s', \$stime,
	'etime=s', \$etime,
	'no-qtime|noqtime', sub { $qtime = '' },
	'no-stime|nostime', sub { $stime = '' },
	'no-etime|noetime', sub { $etime = '' },
	'no-time|notime|n', sub { $qtime = $stime = $etime = '' },
	'job|j=s', \$destjob,
	'ok|o=s', $tests->[0],
	'finished|x=s', $tests->[1],
	'started|s=s', $tests->[2]
);

# Postprocess options:

$s->check_options();
$s->fatal("illegal --exit $cancel")
	unless (&is_nonnegative($cancel) && $cancel <= 0xFF);
&check_file() unless ($s->tcp());

# Load main functions:

require Schedule::Client::Clientfuncs;
Schedule::Client::Clientfuncs->import(qw(:INIT));
&client_init($s);

# Process command:
my $action = shift(@ARGV) // '';
my $ret;
if ($action =~ m{^sto}i) {
	$ret = &cmd_stop_server()
} elsif ($action =~ m{^(?:re|d)}i) {
	$ret = &cmd_remove()
} elsif ($action =~ m{^r}i) {
	$ret = &cmd_run('run')
} elsif ($action =~ m{^(?:e|x)}i) {
	$ret = &cmd_run('exec')
} elsif ($action =~ m{^b}i) {
	$ret = &cmd_parallel('')
} elsif ($action =~ m{^pau}i) {
	$ret = &cmd_pause('pause')
} elsif ($action =~ m{^p}i) {
	$ret = &cmd_parallel(1)
} elsif ($action =~ m{^w}i) {
	$ret = &cmd_run('wait')
} elsif ($action =~ m{^l}i) {
	$ret = &cmd_list('list')
} elsif ($action =~ m{^stat}i) {
	$ret = &cmd_list('status')
} elsif ($action =~ m{^a}i) {
	$ret = &cmd_list('address')
} elsif ($action =~ m{^n}i) {
	$ret = &cmd_list('number')
} elsif ($action =~ m{^t}i) {
	$ret = &cmd_pause('test-pausing', "1\n")
} elsif ($action =~ m{^o}i) {
	$ret = &cmd_test($tests, 0)
} elsif ($action =~ m{^f}i) {
	$ret = &cmd_test($tests, 1)
} elsif ($action =~ m{^starte}i) {
	$ret = &cmd_test($tests, 2)
} elsif ($action =~ m{^(?:i|m|sh)}i) {
	$ret = &cmd_insert()
} elsif ($action =~ m{^quote$}i) {
	$ret = &cmd_quote()
} elsif ($action =~ m{q.*s|s.*q}i) {
	$ret = &cmd_queue('start-or-queue')
} elsif ($action =~ m{^q}i) {
	$ret = &cmd_queue('queue')
} elsif ($action =~ m{^s}i) {
	$ret = &cmd_queue('start')
} elsif ($action =~ m{^(?:co|u)}i) {
	$ret = &cmd_pause('continue')
} elsif ($action =~ m{^c}i) {
	$ret = &cmd_cancel()
} else {
	$s->usage(2)
}
&client_exit($ret);
