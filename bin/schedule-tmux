#!/usr/bin/env sh
# Copyright Martin VÃ¤th <martin@mvath.de>.
# This is part of the schedule project.
set -u

# default for remain:
remain=${SCHEDULE_REMAIN:-0}

# Honour a possible first option to set remain:
case ${1-} in
--no-remain|--noremain|-R)
	remain=0
	shift;;
--remain|-r)
	remain=1
	shift;;
esac
case ${remain:-0} in
0|-*|[nfNF]*|[oO][fF]*)
	remainA=
	remainB=;;
*)
	remainA='set-option set-remain-on-exit on ;'
	remainB='; set-option set-remain-on-exit off';;
esac

# Check whether the command is appropriate, and possibly print a manpage:
schedule --check "$@"
status=$?
[ $status -eq 6 ] || exit $status

# We quote the arguments, since tmux wants only *one* (shell-escaped) argument:
cmd=`schedule quote "$@"`

# To avoid a possible race, we setup a task in the background which will wait:
tmux wait-for $$ &

# Now we open a new window in which we output the command and run schedule
# with a value of -a which will end our waiting task above.

tmux $remainA new-window -d "schedule quote schedule $cmd
schedule -a \"tmux wait-for -S $$\" $cmd" $remainB

# Now we wait for the end of our above task: When this task finishes,
# we can be sure that the passed command has been queued.
# Without waiting, subsequent calls of schedule-tmux in some script
# cannot be guaranteed to queue the commands in the "correct" order.
wait
