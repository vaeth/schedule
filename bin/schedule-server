#!/usr/bin/env perl
# Copyright Martin VÃ¤th <martin@mvath.de>.
# This is part of the schedule project.

require 5.012;
package ScheduleServer v7.0.0;

use strict;
use warnings;
use integer;
use File::Path ();
use File::Spec ();
#use Crypt::Rijndael (); # needed for password protection
#use Digest::SHA (); # needed for password protection
#use Exporter qw(import);
#use Getopt::Long 2.24 ();
#use IO::Select ();
#use IO::Socket 1.19 (); # INET or UNIX, depending on user's choice
#use POSIX (); # needed for --detach (and recommended for --bg, --daemon)
#use Pod::Usage (); # optional, but no manpage or help without this
#use Sys::Hostname (); # not mandatory but recommended
#use Sys::Syslog (); # neeeded for --syslog
#use Term::ANSIColor (); # not mandatory but recommended: fallback to no color
#use version 0.77 ();

use lib '/usr/share/schedule';
use FindBin;
if(($FindBin::Bin // '') ne '') {
	use lib File::Spec->catdir($FindBin::Bin, File::Spec->updir(), 'lib');
	use lib File::Spec->catdir($FindBin::Bin, 'lib');
	use lib $FindBin::Bin
}
use Schedule::Connect ();
use Schedule::Helpers qw(nohup env_to_array is_nonnegative);
&nohup(); # execute as early as possible

# Global/State variables:

our $VERSION;
my $s = Schedule::Connect->new('schedule-server', $VERSION);
my $log = undef;

# Default for the Options:

my $fd = '';
my $umask = 0077;
my $skipcheck = '';
my $uid = '';
my $gid = '';
my $user = 'schedule';
my $group = 'schedule';
my $keepuser = $<;
my $keepgroup = $keepuser;
my $logfile = '';
my $log_append = '';
my $syslog = '';

#
# Functions
#

sub prepare_file {
	$s->default_filename();
	umask($umask);
	my ($vol, $dir) = File::Spec->splitpath($s->file());
	$dir = File::Spec->catpath($vol, $dir);
	return 1 if($dir eq '');
	$s->fatal('cannot create directory ' . $dir)
		unless((-d $dir) || File::Path::make_path($dir));
	my @stat = lstat($dir);
	$s->fatal('cannot find directory ' . $dir) unless(@stat);
	return 1 if($skipcheck);
	$s->fatal($dir . ' owned by ' . $stat[4] . ':' . $stat[5] .
		' instead of ' . $< . ':' . $(,
	'This may be a security risk. Use -S if it is intentional')
		if(($stat[4] != $<) || ($stat[5] != $())
}

#
# Now the main program:
#

if(exists($ENV{'SCHEDULE_SERVER_OPTS'})) {
	unshift(@ARGV, &env_to_array('SCHEDULE_SERVER_OPTS'))
} elsif(exists($ENV{'SCHEDULE_OPTS'})) {
	unshift(@ARGV, &env_to_array('SCHEDULE_OPTS'))
}

eval "END { $s->did_alpha() || $s->exec_alpha() }";

# Parse Options:

$s->get_options(
	'umask|m=s', \$umask,
	'skip-check|S', \$skipcheck,
	'fd|d=s', \$fd,
	'logfile=s', sub { $logfile = $_[1]; $log_append = 1 },
	'Logfile=s', sub { $logfile = $_[1]; $log_append = '' },
	'syslog', \$syslog,
	'uid|U=s', \$uid,
	'gid|G=s', \$gid,
	'user|u=s', \$user,
	'group|g=s', \$group,
	'change-user|c', sub { $keepuser = '' },
	'no-change-user|n', \$keepuser,
	'change-group|C', sub { $keepgroup = '' },
	'no-change-group|N', \$keepgroup,
	'change-permissions|K', sub { $keepuser = $keepgroup = '' },
	'keep-permissions|k', sub { $keepuser = $keepgroup = 1 }
);

# First, drop permissions if possible:

unless($keepgroup) {
	unless(&is_nonnegative($gid)) {
		if($group =~ m{^\w+$}) {
			$gid = getgrnam($group);
			unless(&is_nonnegative($gid)) {
				$gid = getgrnam('nobody');
				if(&is_nonnegative($gid)) {
					$s->warning("failed to get group id of $group",
						'falling back to user nobody');
				} else {
					$s->warning("failed to get group id of $group and of nobody",
						'falling back to group id 65534');
					$gid = 65534
				}
			}
		} else {
			$gid = 65534
		}
	}
	$) = ($gid);
	$) = $gid if($!);
	$s->warning('failed to set egid to $gid:', $!) if($!);
	$( = $gid;
	$s->warning('failed to set gid to $gid:', $!) if($!)
}

unless($keepuser) {
	unless(&is_nonnegative($uid)) {
		if($user =~ m{^\w+$}) {
			$uid = getpwnam($user);
			unless(&is_nonnegative($uid)) {
				$uid = getpwnam('nobody');
				if(&isnonnegative($uid)) {
					$s->warning("failed to get user id of $user",
						'falling back to user nobody');
				} else {
					$s->warning("failed to get user id of $user and of nobody",
						'falling back to user id 65534');
					$uid = 65534
				}
			}
		} else {
			$uid = 65534
		}
	}
	$> = $uid;
	$s->warning("failed to set euid to $uid:", $!) if($!);
	$< = $uid;
	$s->warning("failed to set uid to $uid:", $!) if($!)
}

# Postprocess options:

$s->check_options();

# Process arguments:

$s->usage(2) if(@ARGV);

# Call main functions:

&prepare_file() unless($fd || $s->tcp());

require Schedule::Server::Serverfuncs;
require Schedule::Server::Loop;

Schedule::Server::Serverfuncs->import(qw(:INIT));

&server_init($s);
exit(1) unless(&openserver($fd));
unless($s->did_alpha()) {
	my $ret = $s->exec_alpha();
	exit($ret) if($ret);
	$s->forking()
}

# Prepare logging

if(($logfile ne '') || ($syslog ne '')) {
	require Schedule::Log;
	$log = Schedule::Log->new($s, $syslog, $logfile, $log_append);
	$log->log('info', 'listen')
}
my $succ = &Schedule::Server::Loop::serverloop($log);
$succ = '' unless(&closeserver());
my $x = ($succ ? 0 : 1);
$log->log('info', 'exit (' . $x . ')') if(defined($log));
exit($x);
